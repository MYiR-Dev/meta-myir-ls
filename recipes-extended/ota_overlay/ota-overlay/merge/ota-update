#!/bin/bash

dd if=/dev/mmcblk0 of=/tmp/ota-info bs=512 skip=129024 count=1
updateStatus=`cat /tmp/ota-info | awk '{print $1}'`
oldimageVersion=`cat /tmp/ota-info | awk '{print $3}'`
sdplatform=`cat /tmp/ota-info | awk '{print $2}'`
newimageVersion=`cat /tmp/ota-info | awk '{print $4}'`
solutionname=`cat /tmp/ota-info | awk '{print $5}'`
mid=`cat /tmp/ota-info | awk '{print $6}'`
deviceid=`hostname`
platform=$(echo $deviceid | awk -F . '{print $4}')
boardname=$platform"rdb"
bootimageVersion=`cat /etc/edgescale-version | awk -F '-' '{print $2}'`

nofeedback=0

if [ "$platform"x == x ];then
	echo "there is no platform information"
        exit 1
fi

if [ "$sdplatform"x != "$platform"x ];then
	updateStatus=1
	oldimageVersion=0
fi

echo "updateStatus="$updateStatus
echo "oldimageVersion="$oldimageVersion
echo "bootimageVersion="$bootimageVersion
get_imageURL(){
	api_result=`curl "https://api.edgescale.org/v1/devices/softwares?device_id=$deviceid&solution=$solutionname&version=$imageVersion"`
	imageURL=`echo $api_result | grep url | sed 's/\"//g' | sed 's/.*url:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
}

get_newimageVersion(){
	api_result=`curl "https://api.edgescale.org/v1/devices/softwares?device_id=$deviceid&version=$bootimageVersion"`
	imageURL=`echo $api_result | grep url | sed 's/\"//g' | sed 's/.*url:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	newimageVersion=`echo $api_result | grep version | sed 's/\"//g' | sed 's/.*version:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	solutionname=`echo $api_result | grep solution | sed 's/\"//g' | sed 's/.*solution:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	if [ "$imageURL"x == x ];then
		echo "request version of image failed from server"
		exit 1
	fi
}

feedback_status(){
	if [ $nofeedback -eq 0 ];then
		curl -X POST -H "Content-Type: application/json" https://api.edgescale.org/v1/devices/tasks/status -d '{"device":"'$deviceid'", "mid":'$mid', "status":"'"$1"'"}'
	fi
}

secure_verify(){
	api_result=`curl -X GET "https://api.edgescale.org/v1/devices/softwares?device_id=$deviceid"`
	public_key=`echo $api_result | grep public_key | sed 's/\"//g' | sed 's/.*public_key:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	result=`echo $public_key > /tmp/rsa.base`
	result=`cat /tmp/rsa.base | base64 -d > /tmp/rsa.pub`
	# Using public key verify OEM images(firmware, bootpartition and rootfs)
	result=`openssl dgst -md5 -verify /tmp/rsa.pub -signature ./sign/$firmware_file.sign $firmware_file`
	firmware_status=`echo $result | awk '{print $2}'`
	result=`openssl dgst -md5 -verify /tmp/rsa.pub -signature ./sign/$boot_file.sign $boot_file`
	boot_status=`echo $result | awk '{print $2}'`
	result=`openssl dgst -md5 -verify /tmp/rsa.pub -signature ./sign/$rootfs_file.sign $rootfs_file`
	rootfs_status=`echo $result | awk '{print $2}'`
	verify_status="OK"
	if [ "Failure"x = "$firmware_status"x ]; then
		verify_status="Failure"
	elif [ "Failure"x = "$boot_status"x ]; then
		verify_status="Failure"
	elif [ "Failure"x = "$rootfs_status"x ]; then
		verify_status="Failure"
	fi

	if [ "OK"x = "$verify_status"x ]; then
		echo "The solution image: "$result
		echo "Atfer will Deploying image."
	else
		echo "The solution image: "$result "Please Checking this image!"
		echo "The system will restart after 6 seconds."
		sleep 6
		reboot -f
	fi
}

security_check(){
	api_result=`curl -X GET "https://api.edgescale.org/v1/devices/softwares?device_id=$deviceid"`
	is_signed=`echo $api_result | grep is_signed | sed 's/\"//g' | sed 's/.*is_signed:\(.*$\)/\1/' | awk -F "[,}]" '{print $1}' | sed 's/^[ \t]*//g'`
	if [ "false"x = "$is_signed"x ]; then
		echo "This solution image was not found OEM signature"
	else
		secure_verify
	fi
}

setup_ima_evm(){
        if [ ! -f "/usr/bin/sec_imaevm" ]; then
            echo "No found the integrity tool"
        else
            /usr/bin/sec_imaevm
        fi
}

install_images(){
	flex-installer -i pf -d sd
	if [ ! -d "/run/media/mmcblk0p3" ];then
		echo "partition of SD card is not right"
		exit 1
	fi
	mkdir /run/media/mmcblk0p3/updateImages
	cd /run/media/mmcblk0p3/updateImages
	wget -O full_images.tgz  $imageURL
	tar -xf full_images.tgz
	if [ ! -f "install.sh" ];then
		firmware_file=`ls *firmware*.img`
		boot_file=`ls *boot*.tgz`
		rootfs_file=`ls *rootfs*.tgz`
		if [ ! -f "$firmware_file" ];then
			echo "get firmware image error"
			reboot
		fi
		if [ ! -f "$boot_file" ];then
			echo "get boot image error"
			reboot
		fi
		if [ ! -f "$rootfs_file" ];then
			echo "get rootfs image error"
			reboot
		fi
		security_check
		feedback_status "Deploying image into SD card"
		flex-installer --firmware=$firmware_file --startblock=8 --device=/dev/mmcblk0
		flex-installer -i install --bootpart=$boot_file --rootfs=$rootfs_file --machine=$boardname --device=sd
               setup_ima_evm
	else
		chmod 777 ./install.sh
		./install.sh
		if [[ $? -eq 0 ]];then
			echo "installer successed"
		else
			echo "installer failed"
			reboot
		fi
	fi
	rm -f /run/media/mmcblk0p3/updateImages/*
	cd ~/
	for i in {1..3}
	do
		umount /dev/mmcblk0p$i
	done
}

if [ "$updateStatus"x == 3x -a $oldimageVersion != 0 ];then
	echo "Now need rollback the image version=$oldimageVersion"
	feedback_status "OTA update failed,rollback"
	imageVersion=$oldimageVersion
	get_imageURL
	updateStatus=1
	install_images
	echo "$updateStatus $platform $oldimageVersion $imageVersion $solutionname $mid" > /tmp/ota-info
	dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
elif [ "$updateStatus"x == 8x ];then
	echo "Now need update the image to version=$newimageVersion"
	feedback_status "Entered into reserved system, downloading image"
	imageVersion=$newimageVersion
	get_imageURL
	updateStatus=1
	install_images
	echo "$updateStatus $platform $oldimageVersion $imageVersion $solutionname $mid" > /tmp/ota-info
	dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
else
	echo "now will check the newest image and update it."
	nofeedback=1
	get_newimageVersion
	if [ $newimageVersion \> $oldimageVersion ];then
		imageVersion=$newimageVersion
		updateStatus=1
		install_images
		echo "$updateStatus $platform $oldimageVersion $imageVersion $solutionname $mid" > /tmp/ota-info
		dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
	else
		updateStatus=1
		echo "$updateStatus $platform $oldimageVersion $oldimageVersion $solutionname $mid" > /tmp/ota-info
		dd if=/tmp/ota-info of=/dev/mmcblk0 bs=512 seek=129024 count=1 conv=sync
	fi
fi
	feedback_status "Deployed SD card successfully, rebooting device"
reboot -f
