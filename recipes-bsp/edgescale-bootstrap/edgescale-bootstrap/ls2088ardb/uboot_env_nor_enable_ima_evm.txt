arch=arm
baudrate=115200
board=ls2088ardb
board_name=ls2080ardb
boot_a_script=load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; env exists secureboot && load ${devtype} ${devnum}:${distro_bootpart} ${scripthdraddr} ${prefix}${boot_script_hdr} && esbc_validate ${scripthdraddr};source ${scriptaddr}
boot_extlinux=sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}extlinux/extlinux.conf
boot_net_pci_enum=pci enum
boot_net_usb_start=usb start
boot_prefixes=/ /boot/
boot_script_dhcp=boot.scr.uimg
boot_script_hdr=hdr_ls2088ardb_bs.out
boot_scripts=ls2088ardb_boot.scr
boot_targets=usb0 mmc0 scsi0 dhcp 
bootargs=console=ttyS1,115200 root=/dev/ram0 earlycon=uart8250,mmio,0x21c0600 ramdisk_size=0x2000000 rootwait ima_tcb ima_appraise=fix ima_appraise_tcb evm=fix enforcing=0 default_hugepagesz=1024m hugepagesz=1024m hugepages=8
bootcmd=fsl_mc apply dpl 0x580D00000 && cp.b 0x581000000 0xa0000000 0x3000000&& bootm 0xa0000000
bootcmd_mmc0=setenv devnum 0; run mmc_boot
bootcmd_scsi0=setenv devnum 0; run scsi_boot
bootcmd_usb0=setenv devnum 0; run usb_boot
bootdelay=3
console=ttyAMA0,38400n8
cpu=armv8
distro_bootcmd=setenv scsi_need_init; for target in ${boot_targets}; do run bootcmd_${target}; done
ethact=DPMAC5@xgmii
ethprime=DPMAC5@xgmii
fdtcontroladdr=fbb1d0b8
fdt_addr_r=0x90000000
fdtheader_addr_r=0x80100000
hwconfig=fsl_ddr:bank_intlv=auto
initrd_high=0xffffffffffffffff
kernel_addr=0x581000000
kernel_addr_r=0x81000000
kernel_addr_sd=0x8000
kernel_size=0x3000000
kernel_size_sd=0x14000
kernel_start=0x1000000
kernelheader_addr=0x580800000
kernelheader_addr_r=0x80200000
kernelheader_size=0x40000
kernelheader_start=0x800000
load_addr=0xa0000000
mcinitcmd=fsl_mc start mc 0x580a00000 0x580e00000
mcboottimeout=100000
mcmemsize=0x70000000
sdboot=fsl_mc apply dpl 0x580D00000;run bootcmd_mmc0; reset
mmc_boot=if mmc dev ${devnum}; then setenv devtype mmc; run scan_dev_for_boot_part; fi
nor_bootcmd=echo Trying load from nor..;cp.b $kernel_addr $load_addr $kernel_size ; env exists secureboot && cp.b $kernelheader_addr $kernelheader_addr_r $kernelheader_size && esbc_validate ${kernelheader_addr_r}; bootm $load_addr#$board
qspi_bootcmd=echo Trying load from qspi..;sf probe && sf read $load_addr $kernel_start $kernel_size ; env exists secureboot &&sf read $kernelheader_addr_r $kernelheader_start $kernelheader_size && esbc_validate ${kernelheader_addr_r};  bootm $load_addr#$board
ramdisk_addr=0x800000
ramdisk_size=0x2000000
scan_dev_for_boot=echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_scripts; done;
scan_dev_for_boot_part=part list ${devtype} ${devnum} devplist; env exists devplist || setenv devplist 1; for distro_bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then run scan_dev_for_boot; fi; done
scan_dev_for_extlinux=if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}extlinux/extlinux.conf; then echo Found ${prefix}extlinux/extlinux.conf; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi
scan_dev_for_scripts=for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done
scriptaddr=0x80000000
scripthdraddr=0x80080000
scsi_boot=run scsi_init; if scsi dev ${devnum}; then setenv devtype scsi; run scan_dev_for_boot_part; fi
scsi_init=if ${scsi_need_init}; then setenv scsi_need_init false; scsi scan; fi
scsidevs=0
sd_bootcmd=echo Trying load from SD ..;mmcinfo; mmc read $load_addr $kernel_addr_sd $kernel_size_sd && bootm $load_addr#$board
soc=fsl-layerscape
stderr=serial
stdin=serial
stdout=serial
usb_boot=usb start; if usb dev ${devnum}; then setenv devtype usb; run scan_dev_for_boot_part; fi
